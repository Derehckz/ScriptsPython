import os
import pandas as pd
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, Spacer, KeepTogether
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY
from reportlab.lib.utils import ImageReader
from reportlab.lib.units import inch
import re
from datetime import datetime
import calendar


# ---- Par√°metros de usuario ----
EXCEL_PATH = r"C:\Users\alanc\Desktop\Guias de actividad\nrc.xlsx"
LOGO_PATH = r"C:\Users\alanc\Desktop\Guias de actividad\logo.png"
OUTPUT_ROOT = r"C:\Users\alanc\Desktop\Guias de actividad"
MESES = ["Abril", "Mayo"]  # üëà Aqu√≠ puedes agregar todos los meses que necesites

def obtener_ultimo_dia_mes(mes_nombre, a√±o):
    meses_dict = {
        "Enero": 1, "Febrero": 2, "Marzo": 3, "Abril": 4,
        "Mayo": 5, "Junio": 6, "Julio": 7, "Agosto": 8,
        "Septiembre": 9, "Octubre": 10, "Noviembre": 11, "Diciembre": 12
    }
    mes_num = meses_dict[mes_nombre]
    ultimo_dia = calendar.monthrange(a√±o, mes_num)[1]
    return ultimo_dia


# ---- Estilos ----
styles = getSampleStyleSheet()

style_title = ParagraphStyle("Title", parent=styles["Title"], alignment=TA_CENTER, fontSize=14, leading=18, fontName="Helvetica-Bold")
style_title_bold = ParagraphStyle("TitleBold", parent=styles["Title"], alignment=TA_CENTER, fontSize=14, leading=18, fontName="Helvetica-Bold")
style_center = ParagraphStyle("Center", parent=styles["Normal"], alignment=TA_CENTER, fontSize=12, leading=16, fontName="Helvetica")
style_center_big = ParagraphStyle("CenterBig", parent=styles["Normal"], alignment=TA_CENTER, fontSize=12, leading=17, fontName="Helvetica")
style_norm = ParagraphStyle("Normal", parent=styles["Normal"], fontName="Helvetica", fontSize=10, leading=14, alignment=TA_JUSTIFY)

def add_background(canvas, doc):
    logo = ImageReader(LOGO_PATH)
    canvas.saveState()
    canvas.drawImage(logo, x=40, y=715, width=60, height=60, mask='auto')
    canvas.restoreState()

try:
    df = pd.read_excel(EXCEL_PATH, engine="openpyxl")
    df = df.dropna(subset=["Identificador del profesor", "Profesor"])
except Exception as e:
    print(f"‚ùå Error leyendo el archivo Excel: {e}")
    exit(1)

year_now = datetime.now().year
pdf_total = 0
carpetas_creadas = set()

for MES in MESES:
    ultimo_dia = obtener_ultimo_dia_mes(MES, year_now)
    FECHA_EMISION = f"{ultimo_dia} de {MES} {year_now}"

    existing_files = []

    for (rut, raw_campus), grupo in df.groupby(["Identificador del profesor", "Descripci√≥n Campus"]):
        campus_upper = raw_campus.upper()
        if re.search(r"\bIP\b", campus_upper) or re.search(r"IPST", campus_upper):
            sufijo = "IST2488"
        elif re.search(r"\bCFT\b", campus_upper) or re.search(r"CFTST", campus_upper):
            sufijo = "CST2488"
        else:
            sufijo = "2488"

        partes = grupo["Profesor"].iloc[0].split(";")
        nombre_base = partes[0].strip()
        apellido = partes[1].strip() if len(partes) > 1 else ""
        nombre_full = f"{nombre_base} {apellido}"
        institucion = grupo["Instituci√≥n"].iloc[0].strip()
        campus_desc = re.sub(r"\b(IPST|CFTST)\b", "", raw_campus, flags=re.IGNORECASE).strip()
        carpeta_salida = os.path.join(OUTPUT_ROOT, MES, campus_desc, institucion)  # üìÅ A√±adimos MES a la ruta
        os.makedirs(carpeta_salida, exist_ok=True)
        safe_name = "".join(c for c in nombre_full if c.isalnum() or c in (" ", "_")).rstrip()
        output_pdf = os.path.join(carpeta_salida, f"{rut}-{safe_name}.pdf")

        if os.path.exists(output_pdf):
            existing_files.append(output_pdf)

    overwrite_all = None
    if existing_files:
        print(f"\n‚ö†Ô∏è Para el mes de {MES}: Se encontraron {len(existing_files)} archivos PDF existentes.")
        while True:
            decision = input(f"¬øDeseas sobrescribir los archivos existentes para {MES}? (s=S√≠ / n=No): ").strip().lower()
            if decision in ("s", "n"):
                overwrite_all = (decision == "s")
                break
            else:
                print("Por favor, responde con 's' o 'n'.")

    for (rut, raw_campus), grupo in df.groupby(["Identificador del profesor", "Descripci√≥n Campus"]):
        campus_upper = raw_campus.upper()
        if re.search(r"\bIP\b", campus_upper) or re.search(r"IPST", campus_upper):
            sufijo = "IST2488"
        elif re.search(r"\bCFT\b", campus_upper) or re.search(r"CFTST", campus_upper):
            sufijo = "CST2488"
        else:
            sufijo = "2488"

        TITULO = f"INFORME DE ACTIVIDADES MENSUAL DOCENTE FDI {sufijo}"
        descripcion_convenio = f"Descripci√≥n de las principales actividades realizadas seg√∫n convenio FDI {sufijo}:"
        titulo_desc_convenio = f"Servicios acad√©micos y docentes convenio los lagos FDI {sufijo}:"

        partes = grupo["Profesor"].iloc[0].split(";")
        nombre_base = partes[0].strip()
        apellido = partes[1].strip() if len(partes) > 1 else ""
        nombre_full = f"{nombre_base} {apellido}"
        institucion = grupo["Instituci√≥n"].iloc[0].strip()
        campus_desc = re.sub(r"\b(IPST|CFTST)\b", "", raw_campus, flags=re.IGNORECASE).strip()
        carpeta_salida = os.path.join(OUTPUT_ROOT, MES, campus_desc, institucion)
        os.makedirs(carpeta_salida, exist_ok=True)
        safe_name = "".join(c for c in nombre_full if c.isalnum() or c in (" ", "_")).rstrip()
        output_pdf = os.path.join(carpeta_salida, f"{rut}-{safe_name}.pdf")

        if os.path.exists(output_pdf) and overwrite_all is False:
            print(f"‚è≠Ô∏è Omitido (archivo ya existe): {output_pdf}")
            continue

        try:
            doc = SimpleDocTemplate(output_pdf, pagesize=letter, rightMargin=40, leftMargin=40, topMargin=70, bottomMargin=40)
            story = []

            story.append(Paragraph(TITULO, style_title))
            story.append(Spacer(1, 12))
            story.append(Paragraph(f"<b>Nombre del docente:</b> {rut} - {nombre_full}", style_center))
            story.append(Paragraph(f"<b>Mes:</b> {MES}    <b>Sede:</b> {campus_desc}    <b>Fecha de emisi√≥n:</b> {FECHA_EMISION}", style_center_big))
            story.append(Spacer(1, 12))
            story.append(Paragraph('<hr width="100%" color="grey" />', style_norm))
            story.append(Spacer(1, 12))
            story.append(Paragraph("<b>Motivo principal de las actividades desarrolladas:</b>", style_center))
            story.append(Spacer(1, 6))
            story.append(Paragraph(f"<b>{titulo_desc_convenio}</b>", style_center))
            story.append(Spacer(1, 12))
            story.append(Paragraph(f"<b>{descripcion_convenio}</b>", style_center))
            story.append(Spacer(1, 6))
            actividades = (
                "‚Ä¢ Dictaci√≥n de clases y todas las actividades inherentes a estas, participaci√≥n en reuniones de planeamiento y evaluaci√≥n del proceso.<br />"
                "‚Ä¢ Elaboraci√≥n de registros acad√©micos, elaboraci√≥n y correcci√≥n de pruebas y elaboraci√≥n de ayudas did√°cticas.<br />"
                "‚Ä¢ Coordinaci√≥n de √°reas tem√°ticas de la disciplina o del plan de estudios.<br />"
                "‚Ä¢ Elaboraci√≥n y preparaci√≥n de instrumentos de evaluaci√≥n, elaboraci√≥n y edici√≥n de material de apoyo a la docencia.<br />"
                "‚Ä¢ Otras que le sean encomendadas por el establecimiento educacional conforme con los Planes y cursos aprobados y a la Reglamentaci√≥n Interna y Acad√©mica vigente."
            )
            story.append(Paragraph(actividades, style_norm))
            story.append(Spacer(1, 20))
            story.append(Paragraph("Carga Acad√©mica del Periodo", style_title_bold))
            story.append(Spacer(1, 12))
            tabla_data = [["NRC", "NOMBRE ASIGNATURA"]]
            for _, row in grupo.iterrows():
                tabla_data.append([str(row["NRC"]), row["NOMBRE ASIGNATURA"]])
            table = Table(tabla_data, colWidths=[80, 350])
            table.setStyle([
                ("GRID", (0, 0), (-1, -1), 0.5, "black"),
                ("BACKGROUND", (0, 0), (-1, 0), "#f0f0f0"),
                ("ALIGN", (0, 0), (-1, 0), "CENTER"),
            ])
            story.append(table)
            story.append(Spacer(1, 40))

            firma_docente = f"{rut} - {nombre_full}"
            firma_data = [
                ["__________________________", "__________________________"],
                [firma_docente, "Coordinador general docente"]
            ]
            firma_table = Table(firma_data, colWidths=[260, 260])
            firma_table.setStyle([
                ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                ("FONTSIZE", (0, 0), (-1, -1), 10),
                ("BOTTOMPADDING", (0, 0), (0, 0), 6),
                ("TOPPADDING", (1, 1), (1, 1), 4),
            ])
            story.append(KeepTogether([firma_table]))

            doc.build(story, onFirstPage=add_background, onLaterPages=add_background)
            print(f"‚úÖ Informe generado: {output_pdf}")
            pdf_total += 1
            carpetas_creadas.add(carpeta_salida)

        except Exception as e:
            print(f"‚ùå Error generando el PDF para {rut} - {nombre_full}: {e}")

print("\nüéâ ¬°Proceso completado con √©xito!")
print(f"Total de informes generados: {pdf_total}")
print(f"Total de carpetas creadas: {len(carpetas_creadas)}")

